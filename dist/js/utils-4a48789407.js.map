{"version":3,"sources":["utils.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","isObject","data","Object","assign","target","arguments","i","length","attr","removeCookie","name","options","cookie","expires","path","value","d","Date","setDate","getDate","document","domain","join","cookie_array","split","toUrlDataSmartisan","url","method","str","slice","toUpperCase","toUrlData","xhrGet","callback","xhr","XMLHttpRequest","ActiveXObject","open","send","onreadystatechange","readyState","test","status","responseText","xhrPost","setRequestHeader","ajaxsmartisan","type","dataType","success","complete","error","toLowerCase","context","forEach","item","bind","res","JSON","parse","e","ajax","jsonp","file_name","_default","window","script_ele","createElement","src","body","appendChild","onload","remove","_","selector","ele","querySelectorAll","call","removeClass","className","reg","RegExp","replace","addClass","on","cb_selector","cb","addEventListener","evt","event","node","srcElement","selector_start","substr","selector_type","parentNode","throttle","delay","t","_arguments","setTimeout","apply","shaking","clearTimeout"],"mappings":"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","file":"utils-4a48789407.js","sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction isObject(data) {\n  return _typeof(data) === \"object\" && data !== null && data.constructor && data.constructor === Object;\n} // 对象合并;\n\n\nfunction assign() {\n  var target = arguments[0];\n\n  for (var i = 1; i < arguments.length; i++) {\n    // console.log(arguments[i]);\n    for (var attr in arguments[i]) {\n      target[attr] = arguments[i][attr];\n    }\n  }\n\n  return target;\n}\n\nfunction removeCookie(name, options) {\n  cookie(name, \"\", isObject(options) ? assign(options, {\n    expires: -1\n  }) : {\n    path: options,\n    expires: -1\n  });\n} // cookie操作;\n\n\nfunction cookie(name, value, options) {\n  // 此时参数大于一个，value 是一个字符串。 那么我们认为此时我们在设置cookie;\n  if (arguments.length > 1 && typeof value === \"string\") {\n    if (!isObject(options)) {\n      options = {};\n    }\n\n    if (typeof options.expires === \"number\") {\n      var d = new Date();\n      d.setDate(d.getDate() + options.expires);\n    }\n\n    return document.cookie = [name + \"=\" + value, typeof options.expires === \"number\" ? \";expires=\" + d : \"\", typeof options.domain === \"string\" ? \";domain=\" + options.domain : \"\", typeof options.path === \"string\" ? \";path=\" + options.path : \"\"].join(\"\");\n  }\n\n  var cookie_string = document.cookie;\n  var cookie_array = cookie_string.split(\"; \");\n\n  for (var i = 0; i < cookie_array.length; i++) {\n    if (cookie_array[i].split(\"=\")[0] === name) {\n      return cookie_array[i].split(\"=\")[1];\n    }\n  }\n\n  return \"\";\n}\n\nfunction toUrlDataSmartisan(obj, url, method) {\n  if (isObject(obj)) {\n    var str = \"\";\n\n    for (var attr in obj) {\n      str += \"&\" + attr + obj[attr];\n    }\n\n    str = str.slice(1); // 如果数据发送方式是POST，那么直接返回str就可以了;\n\n    method = method || \"\";\n\n    if (method.toUpperCase() === \"POST\") {\n      return str;\n    }\n\n    url += \"/\" + str;\n    return url;\n  }\n\n  return url;\n}\n\nfunction toUrlData(obj, url, method) {\n  if (isObject(obj)) {\n    var str = \"\";\n\n    for (var attr in obj) {\n      str += \"&\" + attr + \"=\" + obj[attr];\n    }\n\n    str = str.slice(1); // 如果数据发送方式是POST，那么直接返回str就可以了;\n\n    method = method || \"\";\n\n    if (method.toUpperCase() === \"POST\") {\n      return str;\n    }\n\n    url += \"?\" + str;\n    return url;\n  }\n\n  return url;\n} //  AJAX 请求发送;\n\n\nfunction xhrGet(url, callback, data) {\n  var xhr = null;\n\n  if (typeof XMLHttpRequest === \"function\") {\n    xhr = new XMLHttpRequest();\n  } else {\n    xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n\n  url = toUrlData(data, url);\n  xhr.open(\"GET\", url);\n  xhr.send();\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && /^2\\d{2}$/.test(xhr.status)) {\n      typeof callback === \"function\" ? callback(xhr.responseText) : \"\";\n    }\n  };\n}\n\nfunction xhrPost(url, callback, data) {\n  var xhr = null;\n\n  if (typeof XMLHttpRequest === \"function\") {\n    xhr = new XMLHttpRequest();\n  } else {\n    xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  }\n\n  xhr.open(\"POST\", url, true);\n  xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  data = toUrlData(data, url, \"POST\"); // console.log(data);\n\n  xhr.send(data);\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4 && /^2\\d{2}$/.test(xhr.status)) {\n      callback(xhr.responseText);\n    }\n  };\n} // ajax 兼容性良好的封装;\n\n\nfunction ajaxsmartisan(options) {\n  // 默认参数;\n  var _default = {\n    type: \"GET\",\n    url: \"\",\n    data: null,\n    // 返回的数据类型;\n    dataType: \"text\",\n    status: null,\n    success: function success() {},\n    complete: function complete() {},\n    error: function error() {}\n  }; // 我们会创建一些默认参数, 如果用户传入了其他数据会对默认参数进行覆盖;\n\n  options = assign(_default, options);\n  options.type = options.type.toLowerCase(); // 如果存在context;\n\n  if (isObject(options.context)) {\n    var callback_list = [\"success\", \"complete\", \"error\"]; // 如果老版本浏览器更新成for循环;\n\n    callback_list.forEach(function (item) {\n      // console.log(options[item]);\n      options[item] = options[item].bind(options.context);\n    });\n  } // 1. 创建shr ;\n\n\n  var xhr = null;\n\n  if (typeof XMLHttpRequest === \"function\") {\n    xhr = new XMLHttpRequest();\n  } else {\n    xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  } // 可以简化;\n  // 1. 如果请求方式为get，那么我们把数据拼接到url上;\n\n\n  if (options.type === \"get\") {\n    options.url = toUrlDataSmartisan(options.data, options.url, options.type);\n  } // 2. 如果请求方式为post，那么我们把数据拼接到data上;\n\n\n  if (options.type === \"post\") {\n    options.data = toUrlDataSmartisan(options.data, options.url, options.type);\n  } // 2. 根据数据进行方法的调用;\n\n\n  xhr.open(options.type, options.url, true);\n  options.type === \"post\" ? xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\") : \"\"; // 3. 调用send方法;\n\n  xhr.send(options.type === \"get\" ? null : options.data); // 4. 调用回调函数;\n\n  xhr.onreadystatechange = function () {\n    // xhr程序运行结束;\n    if (xhr.readyState === 4) {\n      options.complete();\n\n      if (/^2\\d{2}$/.test(xhr.status)) {\n        // 5.传递数据\n        // 如果需要转换成json那么我们就返回json,如果不需要原样返回;\n        // 如果JSON.parse报错了那么我们要调用错误函数;\n        try {\n          var res = options.dataType === \"json\" ? JSON.parse(xhr.responseText) : xhr.responseText;\n          options.success(res);\n        } catch (e) {\n          options.error(e, xhr.status);\n        }\n      } else {\n        options.error(\"error\", xhr.status);\n      } // 策略模式调用 : \n\n\n      if (isObject(options.status)) {\n        typeof options.status[xhr.status] === \"function\" ? options.status[xhr.status]() : \"\";\n      }\n    }\n  };\n}\n\nfunction ajax(options) {\n  // 默认参数;\n  var _default = {\n    type: \"GET\",\n    url: \"\",\n    data: null,\n    // 返回的数据类型;\n    dataType: \"text\",\n    status: null,\n    success: function success() {},\n    complete: function complete() {},\n    error: function error() {}\n  }; // 我们会创建一些默认参数, 如果用户传入了其他数据会对默认参数进行覆盖;\n\n  options = assign(_default, options);\n  options.type = options.type.toLowerCase(); // 如果存在context;\n\n  if (isObject(options.context)) {\n    var callback_list = [\"success\", \"complete\", \"error\"]; // 如果老版本浏览器更新成for循环;\n\n    callback_list.forEach(function (item) {\n      // console.log(options[item]);\n      options[item] = options[item].bind(options.context);\n    });\n  } // 1. 创建shr ;\n\n\n  var xhr = null;\n\n  if (typeof XMLHttpRequest === \"function\") {\n    xhr = new XMLHttpRequest();\n  } else {\n    xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n  } // 可以简化;\n  // 1. 如果请求方式为get，那么我们把数据拼接到url上;\n\n\n  if (options.type === \"get\") {\n    options.url = toUrlData(options.data, options.url, options.type);\n  } // 2. 如果请求方式为post，那么我们把数据拼接到data上;\n\n\n  if (options.type === \"post\") {\n    options.data = toUrlData(options.data, options.url, options.type);\n  } // 2. 根据数据进行方法的调用;\n\n\n  xhr.open(options.type, options.url, true);\n  options.type === \"post\" ? xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\") : \"\"; // 3. 调用send方法;\n\n  xhr.send(options.type === \"get\" ? null : options.data); // 4. 调用回调函数;\n\n  xhr.onreadystatechange = function () {\n    // xhr程序运行结束;\n    if (xhr.readyState === 4) {\n      options.complete();\n\n      if (/^2\\d{2}$/.test(xhr.status)) {\n        // 5.传递数据\n        // 如果需要转换成json那么我们就返回json,如果不需要原样返回;\n        // 如果JSON.parse报错了那么我们要调用错误函数;\n        try {\n          var res = options.dataType === \"json\" ? JSON.parse(xhr.responseText) : xhr.responseText;\n          options.success(res);\n        } catch (e) {\n          options.error(e, xhr.status);\n        }\n      } else {\n        options.error(\"error\", xhr.status);\n      } // 策略模式调用 : \n\n\n      if (isObject(options.status)) {\n        typeof options.status[xhr.status] === \"function\" ? options.status[xhr.status]() : \"\";\n      }\n    }\n  };\n}\n\nfunction jsonp(url, callback, file_name, data) {\n  var _default = {};\n  _default[file_name || \"callback\"] = \"global_fn_name\"; // 防止data为空;\n\n  data = data || {}; // console.log(_default);\n\n  data = assign(_default, data); // 1. 全局函数; 在局部作用域之中声明全局函数;\n\n  window[\"global_fn_name\"] = function (res) {\n    callback(res);\n  }; // 2. 创建script标签 ;\n\n\n  var script_ele = document.createElement(\"script\"); // 3. 放入url链接;\n\n  script_ele.src = toUrlData(data, url);\n  document.body.appendChild(script_ele);\n\n  script_ele.onload = function () {\n    script_ele.remove();\n  };\n} // 选择器 : 为了区分jquery所以使用 _\n\n\nfunction _(selector) {\n  var ele = document.querySelectorAll(selector);\n\n  if (ele === null) {\n    return ele;\n  }\n\n  if (ele.length === 1) {\n    return ele[0];\n  }\n\n  return [].slice.call(ele);\n} // class 工具\n\n\nfunction removeClass(ele, className) {\n  var reg = new RegExp(\"\\\\s?\" + className, \"g\");\n  ele.className = ele.className.replace(reg, \"\");\n}\n\nfunction addClass(ele, className) {\n  var reg = new RegExp(\"\\\\s?\" + className, \"g\");\n\n  if (reg.test(ele.className)) {\n    return false;\n  }\n\n  ele.className += \" \" + className;\n} // 事件委托的高级封装;\n\n\nfunction on(ele, type, cb_selector, cb) {\n  // 做一个基本判断 : \n  // 1. 正常绑定事件;\n  // 2. 实现事件委托; 多一个参数 => 选择器;\n  // 严谨 : 1. 参数数量不一样 ;\n  //        2. cb_selector => 正常 是函数;\n  //                       => 委托 是字符串;\n  if (arguments.length === 4 && typeof cb_selector === \"string\") {\n    // 事件委托;\n    // 如果你的程序只有两套逻辑，在第一个逻辑之中直接return false ; \n    // 可以省略第二个if逻辑;\n    ele.addEventListener(type, function (evt) {\n      // 在里面加上逻辑进行判断;\n      // 根据逻辑决定是否调用 事件处理函数;\n      var e = evt || event;\n      var target = e.target || e.srcElement; // 判定 : \n\n      var node = target; // 判定究竟是什么选择器非常重要;\n      // 截取选择器的开头;\n\n      var selector_start = cb_selector.substr(0, 1);\n      var selector_type = null; // 为了不让cb_selector 重复截取，那么在这进行一个替换;\n\n      var selector = cb_selector;\n\n      switch (selector_start) {\n        case \".\":\n          selector_type = \"className\"; // 去掉选择符;\n\n          selector = cb_selector.slice(1);\n          break;\n\n        case \"#\":\n          selector_type = \"id\"; // 去掉选择符;\n\n          selector = cb_selector.slice(1);\n          break;\n\n        default:\n          selector_type = \"nodeName\";\n          break;\n      }\n\n      while (node !== ele) {\n        // 你为啥知道这个是类名那 ?\n        // 选择器定了;\n        // 如果此时判定的是标签，那么这个时候我们需要将传入的参数大写;\n        // 上述代码逻辑 : (selector_type === \"nodeName\" ? selector.toUpperCase() : selector)\n        if (!node) break;\n\n        if (node[selector_type] === (selector_type === \"nodeName\" ? selector.toUpperCase() : selector)) {\n          cb.call(node, e);\n          break;\n        }\n\n        node = node.parentNode;\n      }\n    });\n    return false;\n  }\n\n  ele.addEventListener(type, cb_selector);\n} // 函数优化功能；\n// 函数节流 : \n\n\nfunction throttle(callback, delay) {\n  delay = delay || 100; // 返回一个新函数,新函数用于回调函数的调用;\n\n  var t = null;\n  return function () {\n    if (typeof t === \"number\") {\n      return false;\n    } // 需要外部函数的参数;\n    // 类似于 bind 的封装;\n\n\n    var _arguments = arguments;\n    t = setTimeout(function () {\n      t = null;\n      callback.apply(false, _arguments);\n    }, delay);\n  };\n} // 函数去抖 : \n\n\nfunction shaking(callback, delay) {\n  delay = delay || 100; // 返回一个新函数,新函数用于回调函数的调用;\n\n  var t = null;\n  return function () {\n    clearTimeout(t); // 需要外部函数的参数;\n    // 类似于 bind 的封装;\n\n    var _arguments = arguments;\n    t = setTimeout(function () {\n      t = null;\n      callback.apply(false, _arguments);\n    }, delay);\n  };\n}"]}